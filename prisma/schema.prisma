generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model calificaciones {
  id_calificacion Int         @id(map: "calificaciones_pk") @default(autoincrement())
  puntuacion      Int         @db.SmallInt
  fecha           DateTime    @db.Date
  id_usuario      Int
  id_testimonio   Int
  testimonios     testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "calificaciones_testimonios")
  usuarios        usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "calificaciones_usuario")
}

model categorias {
  id_categoria           Int                      @id(map: "categorias_pk") @default(autoincrement())
  nombre                 String                   @db.VarChar(50)
  descripcion            String
  testimonios_categorias testimonios_categorias[]
}

model colecciones {
  id_coleccion            Int                       @id(map: "colecciones_pk") @default(autoincrement())
  titulo                  String                    @db.VarChar(150)
  descripcion             String
  fecha_creacion          DateTime                  @default(now()) @db.Timestamptz(6)
  id_usuario              Int
  usuarios                usuarios                  @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "colecciones_usuario")
  colecciones_testimonios colecciones_testimonios[]
}

model colecciones_testimonios {
  id_coleccion   Int
  id_testimonio  Int
  fecha_agregado DateTime    @default(now()) @db.Timestamptz(6)
  colecciones    colecciones @relation(fields: [id_coleccion], references: [id_coleccion], onDelete: NoAction, onUpdate: NoAction, map: "table_59_colecciones")
  testimonios    testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "table_59_testimonios")

  @@id([id_coleccion, id_testimonio], map: "colecciones_testimonios_pk")
}

model comentarios {
  id_comentario         Int                 @id(map: "comentarios_pk") @default(autoincrement())
  contenido             String
  id_estado             Int
  fecha_creacion        DateTime            @default(now()) @db.Timestamptz(6)
  creado_por_id_usuario Int
  id_testimonio         Int
  parent_id             Int?                @map("parent_id_comentario")
  estado                estado              @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_estado")
  parent                comentarios?        @relation("CommentReplies", fields: [parent_id], references: [id_comentario], onDelete: NoAction, onUpdate: NoAction)
  replies               comentarios[]       @relation("CommentReplies")
  testimonios           testimonios         @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_testimonios")
  usuarios              usuarios            @relation(fields: [creado_por_id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_usuario")
  likes                 likes_comentarios[]
}

model likes_comentarios {
  id_comentario Int         @map("id_comentario")
  id_usuario    Int         @map("id_usuario")
  fecha         DateTime    @default(now()) @db.Timestamptz(6)
  comentarios   comentarios @relation(fields: [id_comentario], references: [id_comentario], onDelete: Cascade, onUpdate: NoAction)
  usuarios      usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_comentario, id_usuario], map: "likes_comentarios_pk")
}

model estado {
  id_estado          Int                  @id(map: "estado_pk") @default(autoincrement())
  nombre             String               @db.VarChar(50)
  comentarios        comentarios[]
  notificaciones     notificaciones[]
  solicitudes_acceso solicitudes_acceso[]
  testimonios        testimonios[]
}

model etiquetas {
  id_etiquetas          Int                     @id(map: "etiquetas_pk") @default(autoincrement())
  nombre                String                  @db.VarChar(50)
  testimonios_etiquetas testimonios_etiquetas[]
}

model eventos_historicos {
  id_evento           Int                   @id(map: "eventos_historicos_pk") @default(autoincrement())
  nombre              String                @db.VarChar(100)
  descripcion         String
  fecha               DateTime              @db.Date
  foro_temas          foro_temas[]          @relation("foro_temas_eventos")
  testimonios_eventos testimonios_eventos[]
}

model foro_comentarios {
  id_forocoment         Int                @id(map: "foro_comentarios_pk") @default(autoincrement())
  contenido             String
  fecha_creacion        DateTime           @default(now()) @db.Timestamptz(6)
  creado_por_id_usuario Int
  id_forotema           Int
  parent_id             Int?               @map("parent_id_forocoment")
  parent                foro_comentarios?  @relation("ForumCommentReplies", fields: [parent_id], references: [id_forocoment])
  replies               foro_comentarios[] @relation("ForumCommentReplies")
  foro_temas            foro_temas         @relation(fields: [id_forotema], references: [id_forotema], onDelete: NoAction, onUpdate: NoAction, map: "foro_comentarios_temas")
  usuarios              usuarios           @relation("foro_comentarios_usuario", fields: [creado_por_id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "foro_comentarios_usuario")
}

model foro_temas {
  id_forotema           Int                 @id(map: "foro_temas_pk") @default(autoincrement())
  titulo                String              @db.VarChar(100)
  descripcion           String
  fecha_creacion        DateTime            @default(now()) @db.Timestamptz(6)
  creado_por_id_usuario Int
  id_evento             Int?
  id_testimonio         Int?
  foro_comentarios      foro_comentarios[]
  eventos_historicos    eventos_historicos? @relation("foro_temas_eventos", fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "foro_temas_eventos")
  testimonios           testimonios?        @relation("foro_temas_testimonios", fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "foro_temas_testimonios")
  usuarios              usuarios            @relation("foro_temas_usuario", fields: [creado_por_id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "foro_temas_usuario")
}

model historial_testimonios {
  id_historial      Int         @id(map: "historial_testimonios_pk") @default(autoincrement())
  version           Int
  cambios           Json        @db.Json
  fecha_edicion     DateTime    @default(now()) @db.Timestamptz(6)
  id_testimonio     Int
  editor_id_usuario Int
  testimonios       testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "historial_testimonios_testimonios")
  usuarios          usuarios    @relation(fields: [editor_id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "historial_testimonios_usuario")
}

model logs {
  id         Int       @id(map: "logs_pk") @default(autoincrement())
  accion     String    @db.VarChar(100)
  detalle    String
  fecha      DateTime  @default(now()) @db.Timestamptz(6)
  id_usuario Int?
  usuarios   usuarios? @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "logs_usuario")
}

model medio {
  id_medio    Int           @id(map: "medio_pk") @default(autoincrement())
  nombre      String        @db.VarChar(50)
  testimonios testimonios[]
}

model notificaciones {
  id_notificacion Int         @id(map: "notificaciones_pk") @default(autoincrement())
  mensaje         String
  fecha_creacion  DateTime    @default(now()) @db.Timestamptz(6)
  leido           Boolean     @default(false)
  id_testimonio   Int
  id_estado       Int
  id_usuario      Int
  estado          estado      @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction, map: "notificaciones_estado")
  testimonios     testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "notificaciones_testimonios")
  usuarios        usuarios    @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "notificaciones_usuario")
}

model permisos {
  id_permiso      Int         @id(map: "permisos_pk")
  permiso         String      @db.VarChar(10)
  fecha_concesion DateTime    @default(now()) @db.Timestamptz(6)
  id_testimonio   Int
  id_rol          Int
  rol             rol         @relation(fields: [id_rol], references: [id_rol], onDelete: NoAction, onUpdate: NoAction, map: "permisos_rol")
  testimonios     testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "permisos_testimonios")
}

model refresh_tokens {
  id         Int      @id @default(autoincrement())
  id_usuario Int
  token      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  usuario    usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
}

model rol {
  id_rol   Int        @id(map: "rol_pk") @default(autoincrement())
  nombre   String     @db.VarChar(50)
  permisos permisos[]
  usuarios usuarios[]
}

model solicitudes_acceso {
  id_solicitud                                         Int         @id(map: "solicitudes_acceso_pk") @default(autoincrement())
  fecha_solicitud                                      DateTime    @db.Timestamptz(6)
  fecha_resolucion                                     DateTime    @db.Timestamptz(6)
  id_testimonio                                        Int
  id_estado                                            Int
  solicitado_por                                       Int
  procesado_por                                        Int
  estado                                               estado      @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction, map: "solicitudes_acceso_estado")
  testimonios                                          testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "solicitudes_acceso_testimonios")
  usuarios_solicitudes_acceso_procesado_porTousuarios  usuarios    @relation("solicitudes_acceso_procesado_porTousuarios", fields: [procesado_por], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "solicitudes_acceso_usuario_processado_por")
  usuarios_solicitudes_acceso_solicitado_porTousuarios usuarios    @relation("solicitudes_acceso_solicitado_porTousuarios", fields: [solicitado_por], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "solicitudes_acceso_usuario_solicitado_por")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model testimonios {
  id_testimonio                                 Int                       @id(map: "testimonios_pk") @default(autoincrement())
  titulo                                        String                    @db.VarChar(255)
  descripcion                                   String
  contenido_texto                               String
  url_medio                                     String                    @db.VarChar(255)
  fecha_validacion                              DateTime                  @db.Timestamptz(6)
  latitud                                       Decimal?                  @db.Decimal(10, 8)
  longitud                                      Decimal?                  @db.Decimal(10, 8)
  duracion                                      Int
  created_at                                    DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime                  @default(now()) @db.Timestamptz(6)
  id_estado                                     Int
  id_medio                                      Int
  verificado_por                                Int
  subido_por                                    Int
  calificaciones                                calificaciones[]
  colecciones_testimonios                       colecciones_testimonios[]
  comentarios                                   comentarios[]
  foro_temas                                    foro_temas[]              @relation("foro_temas_testimonios")
  historial_testimonios                         historial_testimonios[]
  notificaciones                                notificaciones[]
  permisos                                      permisos[]
  solicitudes_acceso                            solicitudes_acceso[]
  estado                                        estado                    @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_estado")
  medio                                         medio                     @relation(fields: [id_medio], references: [id_medio], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_medio")
  usuarios_testimonios_subido_porTousuarios     usuarios                  @relation("testimonios_subido_porTousuarios", fields: [subido_por], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_usuario_subido_por")
  usuarios_testimonios_verificado_porTousuarios usuarios                  @relation("testimonios_verificado_porTousuarios", fields: [verificado_por], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_usuario_verificado_por")
  testimonios_categorias                        testimonios_categorias[]
  testimonios_etiquetas                         testimonios_etiquetas[]
  testimonios_eventos                           testimonios_eventos[]
  transcripciones                               transcripciones[]
}

model testimonios_categorias {
  id_categoria  Int
  id_testimonio Int
  categorias    categorias  @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "table_56_categorias")
  testimonios   testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "table_56_testimonios")

  @@id([id_categoria, id_testimonio], map: "testimonios_categorias_pk")
}

model testimonios_etiquetas {
  id_etiquetas  Int
  id_testimonio Int
  etiquetas     etiquetas   @relation(fields: [id_etiquetas], references: [id_etiquetas], onDelete: NoAction, onUpdate: NoAction, map: "table_57_etiquetas")
  testimonios   testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "table_57_testimonios")

  @@id([id_etiquetas, id_testimonio], map: "testimonios_etiquetas_pk")
}

model testimonios_eventos {
  id_testimonio      Int
  id_evento          Int
  eventos_historicos eventos_historicos @relation(fields: [id_evento], references: [id_evento], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_eventos_eventos_historicos")
  testimonios        testimonios        @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "testimonios_eventos_testimonios")

  @@id([id_testimonio, id_evento], map: "testimonios_eventos_pk")
}

model transcripciones {
  id_transcripcion      Int         @id(map: "transcripciones_pk") @default(autoincrement())
  contenido             String
  idioma                String      @db.VarChar(25)
  fecha_creacion        DateTime    @default(now()) @db.Timestamptz(6)
  id_testimonio         Int
  creado_por_id_usuario Int
  testimonios           testimonios @relation(fields: [id_testimonio], references: [id_testimonio], onDelete: NoAction, onUpdate: NoAction, map: "transcripciones_testimonios")
  usuarios              usuarios    @relation(fields: [creado_por_id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "transcripciones_usuario")
}

model usuarios {
  id_usuario                                                     Int                     @id(map: "usuario_pk") @default(autoincrement())
  nombre                                                         String                  @db.VarChar(20)
  email                                                          String                  @db.VarChar(50)
  password                                                       String                  @db.VarChar(255)
  biografia                                                      String
  two_factor_secret                                              String                  @db.VarChar(255)
  last_login                                                     DateTime                @db.Timestamptz(6)
  created_at                                                     DateTime                @default(now()) @db.Timestamptz(6)
  updated_at                                                     DateTime                @default(now()) @db.Timestamptz(6)
  id_rol                                                         Int
  two_factor_enabled                                             Boolean?
  password_reset_token                                           String?                 @db.VarChar(255)
  password_reset_expires                                         DateTime?               @db.Timestamptz(6)
  profile_image                                                  String?                 @db.VarChar(255)
  calificaciones                                                 calificaciones[]
  colecciones                                                    colecciones[]
  comentarios                                                    comentarios[]
  foro_comentarios                                               foro_comentarios[]      @relation("foro_comentarios_usuario")
  foro_temas                                                     foro_temas[]            @relation("foro_temas_usuario")
  historial_testimonios                                          historial_testimonios[]
  likes_comentarios                                              likes_comentarios[]
  logs                                                           logs[]
  notificaciones                                                 notificaciones[]
  refresh_tokens                                                 refresh_tokens[]
  solicitudes_acceso_solicitudes_acceso_procesado_porTousuarios  solicitudes_acceso[]    @relation("solicitudes_acceso_procesado_porTousuarios")
  solicitudes_acceso_solicitudes_acceso_solicitado_porTousuarios solicitudes_acceso[]    @relation("solicitudes_acceso_solicitado_porTousuarios")
  testimonios_testimonios_subido_porTousuarios                   testimonios[]           @relation("testimonios_subido_porTousuarios")
  testimonios_testimonios_verificado_porTousuarios               testimonios[]           @relation("testimonios_verificado_porTousuarios")
  transcripciones                                                transcripciones[]
  rol                                                            rol                     @relation(fields: [id_rol], references: [id_rol], onDelete: NoAction, onUpdate: NoAction, map: "usuario_rol")
}
